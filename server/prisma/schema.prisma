// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(TEACHER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courses Course[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?  @db.Text
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher     User         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  students    StudentCourse[]
  attendances Attendance[]

  @@map("courses")
}

model Student {
  id                  String   @id @default(cuid())
  firstName           String
  lastName            String
  email               String   @unique
  studentId           String   @unique
  fingerprintTemplate String?  @db.Text
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  courses     StudentCourse[]
  attendances Attendance[]

  @@map("students")
}

model StudentCourse {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  createdAt DateTime @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("student_courses")
}

model Attendance {
  id        String           @id @default(cuid())
  studentId String
  courseId  String
  status    AttendanceStatus @default(PRESENT)
  timestamp DateTime         @default(now())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("attendances")
}

enum Role {
  ADMIN
  TEACHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}
