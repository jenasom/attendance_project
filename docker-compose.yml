version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: bas_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-bio_attendance_2023!}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-bioattendancesysdb}
      MYSQL_USER: ${MYSQL_USER:-bas_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-bas_password_2023!}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - bas_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Node.js Backend Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: bas_server
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 8000
      DATABASE_URL: mysql://${MYSQL_USER:-bas_user}:${MYSQL_PASSWORD:-bas_password_2023!}@mysql:3306/${MYSQL_DATABASE:-bioattendancesysdb}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      PYTHON_SERVER_URL: http://server-py:5000
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "${SERVER_PORT:-8000}:8000"
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - ./server/logs:/app/logs
    networks:
      - bas_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python Fingerprint Processing Server
  server-py:
    build:
      context: ./server-py
      dockerfile: Dockerfile
    container_name: bas_server_py
    restart: unless-stopped
    environment:
      FLASK_ENV: ${FLASK_ENV:-production}
      PORT: 5000
      CORE_SERVER_URL: http://server:8000
      MIN_QUALITY_THRESHOLD: ${MIN_QUALITY_THRESHOLD:-0.6}
      MATCH_THRESHOLD: ${MATCH_THRESHOLD:-0.7}
    ports:
      - "${PYTHON_SERVER_PORT:-5000}:5000"
    volumes:
      - ./server-py/logs:/app/logs
      - ./server-py/temp:/app/temp
    networks:
      - bas_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend (for production deployment)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000/api}
        REACT_APP_PYTHON_SERVER_URL: ${REACT_APP_PYTHON_SERVER_URL:-http://localhost:5000}
    container_name: bas_client
    restart: unless-stopped
    ports:
      - "${CLIENT_PORT:-5000}:80"
    depends_on:
      - server
      - server-py
    networks:
      - bas_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: bas_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - client
      - server
      - server-py
    networks:
      - bas_network
    profiles:
      - with-nginx

  # Redis (for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: bas_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - bas_network
    profiles:
      - with-redis

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  bas_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
